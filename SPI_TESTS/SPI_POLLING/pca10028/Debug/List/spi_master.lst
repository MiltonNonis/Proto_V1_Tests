###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.4.8167/W32 for ARM        15/Apr/2015  13:45:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\spi_master.c
#    Command line =  
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\spi_master.c
#        -D NRF51 -D NUZZLE_COLLAR_PROTO_1 -D BLE_STACK_SUPPORT_REQD -D S110 -D
#        SPI_MASTER_0_ENABLE -D ACCELEROMETER_ENABLE -lCN
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\Debug\List\
#        --diag_suppress Pe301,Pa082 -o
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\..\
#        -I
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\..\pca10028\
#        -I
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\..\devices\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\drivers_nrf\hal\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\drivers_nrf\spi_master\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\libraries\gpiote\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\libraries\scheduler\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\libraries\timer\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\libraries\util\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\softdevice\s110\headers\
#        -I
#        E:\Dev_Tools\NordicSemi\nRF51-DK\nRF51_SDK_7.2.0_cf547b5\components\softdevice\common\softdevice_handler\
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\" -On
#    List file    =  
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\Debug\List\spi_master.lst
#    Object file  =  
#        E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\pca10028\Debug\Obj\spi_master.o
#
###############################################################################

E:\Professional\Nuzzle\Collar\FW\Proto_V1_Tests\SPI_TESTS\SPI_POLLING\spi_master.c
      1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
      2           *
      3           * The information contained herein is property of Nordic Semiconductor ASA.
      4           * Terms and conditions of usage are described in detail in NORDIC
      5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT.
      6           *
      7           * Licensees are granted free, non-transferable use of the information. NO
      8           * WARRANTY of ANY KIND is provided. This heading must NOT be removed from
      9           * the file.
     10           *
     11           */
     12          
     13          #include <spi_master.h>
     14          #include "nrf_delay.h"
     15          #include "nrf_gpio.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void nrf_gpio_cfg_output(uint32_t)
   \                     nrf_gpio_cfg_output: (+1)
   \   00000000   0x2103             MOVS     R1,#+3
   \   00000002   0x....             LDR      R2,??DataTable5  ;; 0x50000700
   \   00000004   0x2304             MOVS     R3,#+4
   \   00000006   0x4343             MULS     R3,R0,R3
   \   00000008   0x50D1             STR      R1,[R2, R3]
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void nrf_gpio_cfg_input(uint32_t, enum <unnamed>)
   \                     nrf_gpio_cfg_input: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0xB2C9             UXTB     R1,R1
   \   00000004   0x008A             LSLS     R2,R1,#+2
   \   00000006   0x....             LDR      R3,??DataTable5  ;; 0x50000700
   \   00000008   0x2404             MOVS     R4,#+4
   \   0000000A   0x4344             MULS     R4,R0,R4
   \   0000000C   0x511A             STR      R2,[R3, R4]
   \   0000000E   0xBC10             POP      {R4}
   \   00000010   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void nrf_gpio_pin_set(uint32_t)
   \                     nrf_gpio_pin_set: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x4081             LSLS     R1,R1,R0
   \   00000004   0x....             LDR      R2,??DataTable5_1  ;; 0x50000508
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void nrf_gpio_pin_clear(uint32_t)
   \                     nrf_gpio_pin_clear: (+1)
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x4081             LSLS     R1,R1,R0
   \   00000004   0x....             LDR      R2,??DataTable5_2  ;; 0x5000050c
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x4770             BX       LR               ;; return
     16          #include "common.h"
     17          #include "nrf51_bitfields.h"
     18          
     19          //#include "spi_master_config.h"
     20          
     21          #include "collar_defines.h" // This file must be in the application folder
     22          
     23          

   \                                 In section .text, align 2, keep-with-next
     24          uint32_t* spi_master_init(SPIModuleNumber module_number, SPIMode mode, bool lsb_first)
     25          {
   \                     spi_master_init: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000E             MOVS     R6,R1
     26              uint32_t config_mode;
     27          
     28              NRF_SPI_Type *spi_base_address = (SPI_MASTER_0 == module_number)? NRF_SPI0 : (NRF_SPI_Type *)NRF_SPI1;
   \   00000006   0xB2E4             UXTB     R4,R4
   \   00000008   0x2C00             CMP      R4,#+0
   \   0000000A   0xD101             BNE      ??spi_master_init_0
   \   0000000C   0x....             LDR      R5,??DataTable5_3  ;; 0x40003000
   \   0000000E   0xE000             B        ??spi_master_init_1
   \                     ??spi_master_init_0: (+1)
   \   00000010   0x....             LDR      R5,??DataTable5_4  ;; 0x40004000
     29          
     30              if(SPI_MASTER_0 == module_number)
   \                     ??spi_master_init_1: (+1)
   \   00000012   0xB2E4             UXTB     R4,R4
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD11B             BNE      ??spi_master_init_2
     31              {
     32          #if defined(ACCELEROMETER_ENABLE)
     33                  /* Configure GPIO pins used for pselsck, pselmosi, pselmiso and pselss for SPI0 */
     34                  nrf_gpio_cfg_output(ACCEL_SPI_SCK_PIN);
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0x.... 0x....      BL       nrf_gpio_cfg_output
     35                  nrf_gpio_cfg_output(ACCEL_SPI_MOSI_PIN);
   \   0000001E   0x2006             MOVS     R0,#+6
   \   00000020   0x.... 0x....      BL       nrf_gpio_cfg_output
     36                  nrf_gpio_cfg_input(ACCEL_SPI_MISO_PIN, NRF_GPIO_PIN_NOPULL);
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x2007             MOVS     R0,#+7
   \   00000028   0x.... 0x....      BL       nrf_gpio_cfg_input
     37                  nrf_gpio_cfg_output(ACCEL_SPI_SS_PIN);
   \   0000002C   0x2008             MOVS     R0,#+8
   \   0000002E   0x.... 0x....      BL       nrf_gpio_cfg_output
     38          
     39                  /* Configure pins, frequency and mode */
     40                  spi_base_address->PSELSCK  = ACCEL_SPI_SCK_PIN;
   \   00000032   0x2005             MOVS     R0,#+5
   \   00000034   0x21A1             MOVS     R1,#+161
   \   00000036   0x00C9             LSLS     R1,R1,#+3        ;; #+1288
   \   00000038   0x5068             STR      R0,[R5, R1]
     41                  spi_base_address->PSELMOSI = ACCEL_SPI_MOSI_PIN;
   \   0000003A   0x2006             MOVS     R0,#+6
   \   0000003C   0x....             LDR      R1,??DataTable5_5  ;; 0x50c
   \   0000003E   0x5068             STR      R0,[R5, R1]
     42                  spi_base_address->PSELMISO = ACCEL_SPI_MISO_PIN;
   \   00000040   0x2007             MOVS     R0,#+7
   \   00000042   0x21A2             MOVS     R1,#+162
   \   00000044   0x00C9             LSLS     R1,R1,#+3        ;; #+1296
   \   00000046   0x5068             STR      R0,[R5, R1]
     43                  nrf_gpio_pin_set(ACCEL_SPI_SS_PIN); /* disable Set slave select (inactive high) */
   \   00000048   0x2008             MOVS     R0,#+8
   \   0000004A   0x.... 0x....      BL       nrf_gpio_pin_set
   \   0000004E   0xE01A             B        ??spi_master_init_3
     44          #else
     45          #endif        
     46              }
     47              else
     48              {
     49          #if defined(ACCELEROMETER_ENABLE)
     50                  /* Configure GPIO pins used for pselsck, pselmosi, pselmiso and pselss for SPI0 */
     51                  nrf_gpio_cfg_output(ACCEL_SPI_SCK_PIN);
   \                     ??spi_master_init_2: (+1)
   \   00000050   0x2005             MOVS     R0,#+5
   \   00000052   0x.... 0x....      BL       nrf_gpio_cfg_output
     52                  nrf_gpio_cfg_output(ACCEL_SPI_MOSI_PIN);
   \   00000056   0x2006             MOVS     R0,#+6
   \   00000058   0x.... 0x....      BL       nrf_gpio_cfg_output
     53                  nrf_gpio_cfg_input(ACCEL_SPI_MISO_PIN, NRF_GPIO_PIN_NOPULL);
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x2007             MOVS     R0,#+7
   \   00000060   0x.... 0x....      BL       nrf_gpio_cfg_input
     54                  nrf_gpio_cfg_output(ACCEL_SPI_SS_PIN);
   \   00000064   0x2008             MOVS     R0,#+8
   \   00000066   0x.... 0x....      BL       nrf_gpio_cfg_output
     55          
     56                  /* Configure pins, frequency and mode */
     57                  spi_base_address->PSELSCK  = ACCEL_SPI_SCK_PIN;
   \   0000006A   0x2005             MOVS     R0,#+5
   \   0000006C   0x21A1             MOVS     R1,#+161
   \   0000006E   0x00C9             LSLS     R1,R1,#+3        ;; #+1288
   \   00000070   0x5068             STR      R0,[R5, R1]
     58                  spi_base_address->PSELMOSI = ACCEL_SPI_MOSI_PIN;
   \   00000072   0x2006             MOVS     R0,#+6
   \   00000074   0x....             LDR      R1,??DataTable5_5  ;; 0x50c
   \   00000076   0x5068             STR      R0,[R5, R1]
     59                  spi_base_address->PSELMISO = ACCEL_SPI_MISO_PIN;
   \   00000078   0x2007             MOVS     R0,#+7
   \   0000007A   0x21A2             MOVS     R1,#+162
   \   0000007C   0x00C9             LSLS     R1,R1,#+3        ;; #+1296
   \   0000007E   0x5068             STR      R0,[R5, R1]
     60                  nrf_gpio_pin_set(ACCEL_SPI_SS_PIN); /* disable Set slave select (inactive high) */
   \   00000080   0x2008             MOVS     R0,#+8
   \   00000082   0x.... 0x....      BL       nrf_gpio_pin_set
     61          
     62          #else
     63                  /* Configure GPIO pins used for pselsck, pselmosi, pselmiso and pselss for SPI1*/
     64                  nrf_gpio_cfg_output(SPI_PSELSCK1);
     65                  nrf_gpio_cfg_output(SPI_PSELMOSI1);
     66                  nrf_gpio_cfg_input(SPI_PSELMISO1, NRF_GPIO_PIN_NOPULL);
     67                  nrf_gpio_cfg_output(SPI_PSELSS1);
     68          
     69                  /* Configure pins, frequency and mode */
     70                  spi_base_address->PSELSCK  = SPI_PSELSCK1;
     71                  spi_base_address->PSELMOSI = SPI_PSELMOSI1;
     72                  spi_base_address->PSELMISO = SPI_PSELMISO1;
     73                  nrf_gpio_pin_set(SPI_PSELSS1);         /* disable Set slave select (inactive high) */
     74          #endif        
     75              }
     76          
     77              spi_base_address->FREQUENCY = (uint32_t) SPI_FREQUENCY_FREQUENCY_M1;    // SPI_OPERATING_FREQUENCY;
   \                     ??spi_master_init_3: (+1)
   \   00000086   0x2080             MOVS     R0,#+128
   \   00000088   0x0540             LSLS     R0,R0,#+21       ;; #+268435456
   \   0000008A   0x....             LDR      R1,??DataTable5_6  ;; 0x524
   \   0000008C   0x5068             STR      R0,[R5, R1]
     78          
     79              switch (mode )
   \   0000008E   0xB2F6             UXTB     R6,R6
   \   00000090   0x2E00             CMP      R6,#+0
   \   00000092   0xD005             BEQ      ??spi_master_init_4
   \   00000094   0x2E02             CMP      R6,#+2
   \   00000096   0xD009             BEQ      ??spi_master_init_5
   \   00000098   0xD305             BCC      ??spi_master_init_6
   \   0000009A   0x2E03             CMP      R6,#+3
   \   0000009C   0xD009             BEQ      ??spi_master_init_7
   \   0000009E   0xE00B             B        ??spi_master_init_8
     80              {
     81                  /*lint -e845 -save // A zero has been given as right argument to operator '!'" */
     82                  case SPI_MODE0:
     83                      config_mode = (SPI_CONFIG_CPHA_Leading << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos);
   \                     ??spi_master_init_4: (+1)
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x0007             MOVS     R7,R0
     84                      break;
   \   000000A4   0xE00A             B        ??spi_master_init_9
     85                  case SPI_MODE1:
     86                      config_mode = (SPI_CONFIG_CPHA_Trailing << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos);
   \                     ??spi_master_init_6: (+1)
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x0007             MOVS     R7,R0
     87                      break;
   \   000000AA   0xE007             B        ??spi_master_init_9
     88                  case SPI_MODE2:
     89                      config_mode = (SPI_CONFIG_CPHA_Leading << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveLow << SPI_CONFIG_CPOL_Pos);
   \                     ??spi_master_init_5: (+1)
   \   000000AC   0x2004             MOVS     R0,#+4
   \   000000AE   0x0007             MOVS     R7,R0
     90                      break;
   \   000000B0   0xE004             B        ??spi_master_init_9
     91                  case SPI_MODE3:
     92                      config_mode = (SPI_CONFIG_CPHA_Trailing << SPI_CONFIG_CPHA_Pos) | (SPI_CONFIG_CPOL_ActiveLow << SPI_CONFIG_CPOL_Pos);
   \                     ??spi_master_init_7: (+1)
   \   000000B2   0x2006             MOVS     R0,#+6
   \   000000B4   0x0007             MOVS     R7,R0
     93                      break;
   \   000000B6   0xE001             B        ??spi_master_init_9
     94                  default:
     95                      config_mode = 0;
   \                     ??spi_master_init_8: (+1)
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x0007             MOVS     R7,R0
     96                      break;
     97                  /*lint -restore */
     98              }
     99              if (lsb_first)
   \                     ??spi_master_init_9: (+1)
   \   000000BC   0x4668             MOV      R0,SP
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x2800             CMP      R0,#+0
   \   000000C2   0xD004             BEQ      ??spi_master_init_10
    100              {
    101                  /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    102                  spi_base_address->CONFIG = (config_mode | (SPI_CONFIG_ORDER_LsbFirst << SPI_CONFIG_ORDER_Pos));
   \   000000C4   0x2001             MOVS     R0,#+1
   \   000000C6   0x4338             ORRS     R0,R0,R7
   \   000000C8   0x....             LDR      R1,??DataTable5_7  ;; 0x554
   \   000000CA   0x5068             STR      R0,[R5, R1]
   \   000000CC   0xE001             B        ??spi_master_init_11
    103              }
    104              else
    105              {
    106                  /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    107                  spi_base_address->CONFIG = (config_mode | (SPI_CONFIG_ORDER_MsbFirst << SPI_CONFIG_ORDER_Pos));
   \                     ??spi_master_init_10: (+1)
   \   000000CE   0x....             LDR      R0,??DataTable5_7  ;; 0x554
   \   000000D0   0x502F             STR      R7,[R5, R0]
    108              }
    109          
    110              spi_base_address->EVENTS_READY = 0U;
   \                     ??spi_master_init_11: (+1)
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x2184             MOVS     R1,#+132
   \   000000D6   0x0049             LSLS     R1,R1,#+1        ;; #+264
   \   000000D8   0x5068             STR      R0,[R5, R1]
    111          
    112              /* Enable */
    113              spi_base_address->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x21A0             MOVS     R1,#+160
   \   000000DE   0x00C9             LSLS     R1,R1,#+3        ;; #+1280
   \   000000E0   0x5068             STR      R0,[R5, R1]
    114          
    115              return (uint32_t *)spi_base_address;
   \   000000E2   0x0028             MOVS     R0,R5
   \   000000E4   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    116          }
    117          

   \                                 In section .text, align 2, keep-with-next
    118          bool spi_master_tx_rx(uint32_t *spi_base_address, uint16_t transfer_size, const uint8_t *tx_data, uint8_t *rx_data)
    119          {
   \                     spi_master_tx_rx: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0007             MOVS     R7,R0
    120              uint32_t counter = 0;
   \   00000006   0x2400             MOVS     R4,#+0
    121              uint16_t number_of_txd_bytes = 0;
   \   00000008   0x2500             MOVS     R5,#+0
    122              uint32_t SEL_SS_PINOUT;
    123              /*lint -e{826} //Are too small pointer conversion */
    124              NRF_SPI_Type *spi_base = (NRF_SPI_Type *)spi_base_address;
   \   0000000A   0x003E             MOVS     R6,R7
    125          
    126              if( (uint32_t *)NRF_SPI0 == spi_base_address)
   \   0000000C   0x....             LDR      R0,??DataTable5_3  ;; 0x40003000
   \   0000000E   0x4287             CMP      R7,R0
   \   00000010   0xD102             BNE      ??spi_master_tx_rx_0
    127              {
    128          #if defined(ACCELEROMETER_ENABLE)
    129                  SEL_SS_PINOUT = ACCEL_SPI_SS_PIN;
   \   00000012   0x2008             MOVS     R0,#+8
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0xE001             B        ??spi_master_tx_rx_1
    130          #else
    131                  SEL_SS_PINOUT = SPI_PSELSS0;           
    132          #endif        
    133              }
    134              else
    135              {
    136          #if defined(ACCELEROMETER_ENABLE)
    137                  SEL_SS_PINOUT = ACCEL_SPI_SS_PIN;
   \                     ??spi_master_tx_rx_0: (+1)
   \   00000018   0x2008             MOVS     R0,#+8
   \   0000001A   0x9000             STR      R0,[SP, #+0]
    138          #else
    139                  SEL_SS_PINOUT = SPI_PSELSS0;           
    140          #endif        
    141          
    142              }
    143          
    144              /* enable slave (slave select active low) */
    145              nrf_gpio_pin_clear(SEL_SS_PINOUT);
   \                     ??spi_master_tx_rx_1: (+1)
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x.... 0x....      BL       nrf_gpio_pin_clear
    146          
    147              while(number_of_txd_bytes < transfer_size)
   \                     ??spi_master_tx_rx_2: (+1)
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x8900             LDRH     R0,[R0, #+8]
   \   00000026   0xB2AD             UXTH     R5,R5
   \   00000028   0x4285             CMP      R5,R0
   \   0000002A   0xD224             BCS      ??spi_master_tx_rx_3
    148              {
    149                  spi_base->TXD = (uint32_t)(tx_data[number_of_txd_bytes]);
   \   0000002C   0x9803             LDR      R0,[SP, #+12]
   \   0000002E   0xB2AD             UXTH     R5,R5
   \   00000030   0x5D40             LDRB     R0,[R0, R5]
   \   00000032   0x....             LDR      R1,??DataTable5_8  ;; 0x51c
   \   00000034   0x5070             STR      R0,[R6, R1]
    150          
    151                  /* Wait for the transaction complete or timeout (about 10ms - 20 ms) */
    152                  while ((spi_base->EVENTS_READY == 0U) && (counter < TIMEOUT_COUNTER))
   \                     ??spi_master_tx_rx_4: (+1)
   \   00000036   0x2084             MOVS     R0,#+132
   \   00000038   0x0040             LSLS     R0,R0,#+1        ;; #+264
   \   0000003A   0x5830             LDR      R0,[R6, R0]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD105             BNE      ??spi_master_tx_rx_5
   \   00000040   0x20FA             MOVS     R0,#+250
   \   00000042   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000044   0x4284             CMP      R4,R0
   \   00000046   0xD201             BCS      ??spi_master_tx_rx_5
    153                  {
    154                      counter++;
   \   00000048   0x1C64             ADDS     R4,R4,#+1
   \   0000004A   0xE7F4             B        ??spi_master_tx_rx_4
    155                  }
    156          
    157                  if (counter == TIMEOUT_COUNTER)
   \                     ??spi_master_tx_rx_5: (+1)
   \   0000004C   0x20FA             MOVS     R0,#+250
   \   0000004E   0x0080             LSLS     R0,R0,#+2        ;; #+1000
   \   00000050   0x4284             CMP      R4,R0
   \   00000052   0xD104             BNE      ??spi_master_tx_rx_6
    158                  {
    159                      /* timed out, disable slave (slave select active low) and return with error */
    160                      nrf_gpio_pin_set(SEL_SS_PINOUT);
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0x.... 0x....      BL       nrf_gpio_pin_set
    161                      return false;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xE00F             B        ??spi_master_tx_rx_7
    162                  }
    163                  else
    164                  {   /* clear the event to be ready to receive next messages */
    165                      spi_base->EVENTS_READY = 0U;
   \                     ??spi_master_tx_rx_6: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x2184             MOVS     R1,#+132
   \   00000062   0x0049             LSLS     R1,R1,#+1        ;; #+264
   \   00000064   0x5070             STR      R0,[R6, R1]
    166                  }
    167          
    168                  rx_data[number_of_txd_bytes] = (uint8_t)spi_base->RXD;
   \   00000066   0x20A3             MOVS     R0,#+163
   \   00000068   0x00C0             LSLS     R0,R0,#+3        ;; #+1304
   \   0000006A   0x5830             LDR      R0,[R6, R0]
   \   0000006C   0x9904             LDR      R1,[SP, #+16]
   \   0000006E   0xB2AD             UXTH     R5,R5
   \   00000070   0x5548             STRB     R0,[R1, R5]
    169                  number_of_txd_bytes++;
   \   00000072   0x1C6D             ADDS     R5,R5,#+1
   \   00000074   0xE7D5             B        ??spi_master_tx_rx_2
    170              };
    171          
    172              /* disable slave (slave select active low) */
    173              nrf_gpio_pin_set(SEL_SS_PINOUT);
   \                     ??spi_master_tx_rx_3: (+1)
   \   00000076   0x9800             LDR      R0,[SP, #+0]
   \   00000078   0x.... 0x....      BL       nrf_gpio_pin_set
    174          
    175              return true;
   \   0000007C   0x2001             MOVS     R0,#+1
   \                     ??spi_master_tx_rx_7: (+1)
   \   0000007E   0xB005             ADD      SP,SP,#+20
   \   00000080   0xBDF0             POP      {R4-R7,PC}       ;; return
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x50000700         DC32     0x50000700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x50000508         DC32     0x50000508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x5000050C         DC32     0x5000050c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40003000         DC32     0x40003000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40004000         DC32     0x40004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x0000050C         DC32     0x50c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x00000524         DC32     0x524

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x00000554         DC32     0x554

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x0000051C         DC32     0x51c

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   nrf_gpio_cfg_input
       0   nrf_gpio_cfg_output
       0   nrf_gpio_pin_clear
       0   nrf_gpio_pin_set
      24   spi_master_init
        24   -> nrf_gpio_cfg_input
        24   -> nrf_gpio_cfg_output
        24   -> nrf_gpio_pin_set
      40   spi_master_tx_rx
        40   -> nrf_gpio_pin_clear
        40   -> nrf_gpio_pin_set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
      18  nrf_gpio_cfg_input
      12  nrf_gpio_cfg_output
      10  nrf_gpio_pin_clear
      10  nrf_gpio_pin_set
     230  spi_master_init
     130  spi_master_tx_rx

 
 446 bytes in section .text
 
 446 bytes of CODE memory

Errors: none
Warnings: none
